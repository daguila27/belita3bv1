{
  "name": "Promise",
  "version": "1.0.5",
  "description": "Basic JS Promise Implementation for funzzies Open to suggestions for improvements.",
  "main": "lib/Promise.js",
  "scripts": {
    "test": "babel-node src/test/main.js",
    "dev": "nodemon src/test/main.js --exec babel-node",
    "start": "babel-node src/Promise.js",
    "build": "babel src --out-dir lib",
    "prepublish": "npm run build"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ryanlinnane/Promise-lite"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "babel-cli": "^6.14.0"
  },
  "devDependencies": {
    "babel-preset-es2015": "^6.14.0",
    "nodemon": "^1.10.2"
  },
  "readme": "# Promise-lite\nBasic JS Promise Implementation for funzzies\nOpen to suggestions for improvements.\n\n## Npm Module\n\n### Install\n```\n  $ npm install -S Promise\n```\n\n### ES6+\n```javascript\n  import Promise from 'Promise'\n```\n### ES5\n```javascript\n  var Promise = require('Promise').default\n```\n\n\n\n\n## About\n\nSupports .then chaining and async resolution/rejection.\n\n\n## Development\n\n### Install\n```\n  $ git clone <project>\n  $ npm install\n  $ npm run dev //edit src folder\n```\n### Build\n```\n  $ npm run build\n```\n\n### Example\n\n```javascript\n  import Promise from 'Promise'\n\n  const p = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(5), 1000)\n  })\n  .then((fulfilled) => {\n    console.log('fulfilled', fulfilled)\n    return \"success\"\n  }, (rejected) => {\n    console.log('rejected ', rejected)\n  })\n  .then((fulfilled) => {\n    console.log('fulfilled 2 ', fulfilled)\n  }, (rejected) => {\n    console.log('rejected 2 ', rejected)\n  })\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ryanlinnane/Promise-lite/issues"
  },
  "_id": "Promise@1.0.5",
  "dist": {
    "shasum": "634c76f45c6a9d015dd9fdc6c59eb1e8e537a6b0"
  },
  "_from": "Promise@",
  "_resolved": "https://registry.npmjs.org/Promise/-/Promise-1.0.5.tgz"
}
