{
  "name": "sloth-logger",
  "version": "1.0.3",
  "description": "A happy little logger with custom levels, formats, output options and more",
  "keywords": [
    "log",
    "formatted",
    "timestamp",
    "email"
  ],
  "main": "lib/index.js",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "NODE_ENV=test ./node_modules/tape/bin/tape -r babel-register ./lib/tests/**/**/*.test.js",
    "watch": "babel source -w --presets babel-preset-es2015 --out-dir lib",
    "build": "babel source --presets babel-preset-es2015 --out-dir lib",
    "prepublish": "npm run build"
  },
  "author": {
    "name": "Nater",
    "email": "nater_nater@me.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:natergj/sloth-log.git"
  },
  "dependencies": {
    "ansi_up": "^1.3.0",
    "colors": "^1.1.2",
    "dateformat": "^1.0.12",
    "lodash": "^4.6.1",
    "nodemailer": "^2.3.0",
    "stripcolorcodes": "^0.1.0"
  },
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-polyfill": "^6.5.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-preset-es2015-node4": "^2.0.3",
    "babel-register": "^6.5.1",
    "jsdoc-babel": "^0.1.0",
    "pretty-data": "^0.40.0",
    "tape": "^4.4.0",
    "xmldom": "^0.1.19",
    "xpath.js": "^1.0.6"
  },
  "readme": "![Logo](https://raw.githubusercontent.com/natergj/sloth-logger/master/logo.png)\n## Sloth Logger\nA happy little logger with custom levels, colors, formats, output options and more\n\n## Installation\n\n    npm install sloth-logger\n\n\n## Basic Usage\nSlothLogger has 5 log types by default and the log level is set to show all logs. The default log types are:\nerror, warn, info, inspect, debug.\n\nBy default, logs are output to the console.\n\n```javascript\nvar SlothLogger = require('sloth-logger');\nvar logger = new SlothLogger.Logger();\n\nlogger.error('Error Log Line');\nlogger.debug('Debug Log Line');\nlogger.info('Line with variable: %s', 'stringVar');\n```\n### Output\n\n```bash\n[ERROR][3/10/16 12:20:26 PM EST][log.js:47] Error Log Line\n[DEBUG][3/10/16 12:20:26 PM EST][log.js:48] Debug Log Line\n[INFO][3/10/16 12:59:26 PM EST][log.js:49] Line with variable: stringVar\n```\n\n## Setting properties of each log level\nEach Log Level contains the following properties. New levels are created with these defaults\n\n```javascript\n'destination': process.stdout,\n'dateFormat': 'm/dd/yy h:MM:ss TT Z',\n'color': 'gray',\n'sendEmail': false,\n'inspect': false,\n'inspectOptions': {},\n'logLevelThreshold': 5,\n'format': '${logLevelName}[${logDate}][${relativeFilePath}:${line}] ${logMessage}',\n'aggregator': null  \n```\n\ndestination: Takes an instance of an fs.WriteStream or a file path string   \ndateFormat: Takes a date format. Uses [dateformat](https://www.npmjs.com/package/dateformat)   \ncolor: Takes a color string. Uses [colors](https://www.npmjs.com/package/colors)   \nsendEmail: Takes a Boolean. States whether individual log entries should be emailed   \ninspect: Takes a Boolean. States whether to use util.inspect when printing log entry   \ninspectOptions: Takes an [object](https://nodejs.org/dist/latest-v4.x/docs/api/util.html#util_util_inspect_object_options) to pass to the util.inspect function   \nlogLevelThreshold: Takes an integer. Log will only be handled if logLevelThreshold is less than or equal to logger's logLevel      \naggregator: Takes an Aggregator. If set, sendEmail option is ignored and emails are only sent when aggregotor.send() is called    \nformat: Takes and ES2015 template literal style string.   \n\n#### Available options for format\nfullFilePath: full path to file calling logger   \nrelativeFilePath: path to file relative to the process.cwd   \nline: line of file calling logger   \nlogDate: formatting text string of date/time. Uses [dateformat](https://www.npmjs.com/package/dateformat)   \nlogLevelName: name of the log level (i.e. error, warn, etc) enclosed in []   \nlogMessage: formatted message   \n\nThese settings can be customized when a new SlotLogger is initialized or during runtime. \n#### Set at initialization\n\n```javascript\nlet logger = new SlothLogger.Logger({\n    levels: {\n        info: {\n            'destination': 'logs/info.log'\n        },\n        warn: {\n            'destination': 'logs/warn.log'\n        },\n        crit: {\n            'destination': process.stderr,\n            'dateFormat': 'm/dd/yy h:MM:ss TT Z',\n            'logLevelThreshold': 0\n        }\n    }\n});\n```\nNote, that if you'd like to add a custom log level, simply add a new object keyed by the name of your new level. The above would create a new logger.crit() function with the specified adjustments to the default log level options.   \n    \n## Set logLevels on a per-file basis\nIf you're currently debugging a single file and wish to ignore your debug messages on other files, you can specify a custom log level on a per-file basis.   \nTo do this, you will need to set your logger as a global function\n\n```javascript\nvar SlothLogger = require('../index.js');\nglobal.logger = new SlothLogger.Logger({\n\tlogLevel: 1\n});\n```\n\nThen, at the top of the file that you are debugging, you will specify the log level to a higher number\n\n```javascript\nlogger.setLogLevelForThisFile(4);\n```\n\nYou can also change the logLevel at runtime if you are debugging a specific section of synchronous code\n\n```javascript\nvar SlothLogger = require('../index.js');\nglobal.logger = new SlothLogger.Logger({\n\tlogLevel: 1\n});\n\nlogger.debug('I will not print');\nlogger.logLevel = 5;\nlogger.debug('I will print now');\nlogger.logLevel = 1;\nlogger.debug('I will not print again');\n```\n\n    \n## Send an email notification for each log item\nBy providing your logger with email settings, you can set each log type to send an email every time the logger is called.\n\nSlothLogger uses [nodemailer](https://www.npmjs.com/package/nodemailer) for mailing. Options for nodemailer transport can be found in their documentation.\n\n```javascript\nvar SlothLogger = require('sloth-logger');\nvar logger = new SlothLogger.Logger({\n\temailSettings: {   \n        from: 'noreply@mycompany.com',\n        to: 'admin@mycompany.com',\n        transportConfig: {\n            host: 'smtp.mycompany.com',\n            port: 25\n        }\n    }\n});\nlogger.sendEmail('error', true);\n```\n\n## Set Log Email Aggregator\nYou can also set a log aggregator to collect log entries and send them in bulk. sendEmail attributes of log types are ignored if an aggregator is assigned. Log entries will always be emailed and they will only be emailed once send() has been called on the Aggregator.\n\n```javascript\nvar SlothLogger = require('sloth-logger');\nvar logger = new SlothLogger.Logger({\n\temailSettings: {   \n        from: 'noreply@mycompany.com',\n        to: 'admin@mycompany.com',\n        subject: 'Error logs from server',\n        transportConfig: {\n            host: 'smtp.mycompany.com',\n            port: 25\n        }\n    }\n});\n\nvar aggregator = new SlothLogger.Aggregator({\n    emailSettings: {   \n        from: 'noreply@mycompany.com',\n        to: 'admin@mycompany.com',\n        subject: 'Aggregated logs from server',\n        transportConfig: {\n            host: 'smtp.mycompany.com',\n            port: 25\n        }\n    }\n});\n\nlogger.setLevelProps('error', { aggregator: aggregator });\n\nlogger.error('add this line to error log');\naggregator.send(function(err){\n    if(err){\n        console.error(err);\n    }\n});\n```\n",
  "bugs": {
    "url": "https://github.com/natergj/sloth-log/issues"
  },
  "_id": "sloth-logger@1.0.3",
  "dist": {
    "shasum": "1f013112af848007d212833fb1a7f3d760e1085b"
  },
  "_from": "sloth-logger@^1.0.3",
  "_resolved": "https://registry.npmjs.org/sloth-logger/-/sloth-logger-1.0.3.tgz"
}
